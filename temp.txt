 public void FindNodeMoves(int number, List<char> moves)
        {
            switch (number.CompareTo(Number))
            {
                case -1:
                    moves.Add('l');
                    LeftNode.FindNodeMoves(number, moves);
                    break;
                case 1:
                    moves.Add('r');
                    RightNode.FindNodeMoves(number, moves);
                    break;
                default: return;
            }
        }

        public static Node BalanceNode(Node node)
        {
            List<int> orderedNums = new List<int>();
            InorderTraversalArray(node, orderedNums); // set values to orderedNums
            int midVal = orderedNums[orderedNums.Count / 2]; // take middle value
            List<char> moves = new List<char>(); // find moves to find newRoot
            node.FindNodeMoves(midVal, moves); // find node and moves neccessary to find it

            foreach (char move in moves)
            {
                node = (move == 'l') ? Node.RotateRight(node) : Node.RotateLeft(node);
            }

            if (node.LeftNode != null)
            {
                node.LeftNode = Node.BalanceNode(node.LeftNode);
            }

            if (node.RightNode != null)
            {
                node.RightNode = Node.BalanceNode(node.RightNode);
            }

            return node;
        }